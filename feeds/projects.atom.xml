<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Adaptive Slaugther Robots - projects</title><link href="http://markpp.github.io/" rel="alternate"></link><link href="http://markpp.github.io/feeds/projects.atom.xml" rel="self"></link><id>http://markpp.github.io/</id><updated>2017-05-10T17:49:00+02:00</updated><subtitle>Robotics, machine learning and life as an industrial PhD</subtitle><entry><title>Robotics</title><link href="http://markpp.github.io/robotics_stuff.html" rel="alternate"></link><published>2017-05-10T17:49:00+02:00</published><updated>2017-05-10T17:49:00+02:00</updated><author><name>Mark Philip Philipsen</name></author><id>tag:markpp.github.io,2017-05-10:/robotics_stuff.html</id><summary type="html">&lt;p&gt;Notes on robotics&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Challanges&lt;/h1&gt;
&lt;p&gt;Compared to the manufactoring of e.g. cars using robots, slaughtering will have the following problems
-   Cobots are too slow
-   Limited used of markers
-   Variation
-   Disassemble vs assembling&lt;/p&gt;
&lt;h1&gt;Uarm Swift Pro&lt;/h1&gt;
&lt;p&gt;ubuntu&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/uArm-Developer/UArmForROS"&gt;original uArm and ros&lt;/a&gt;
&lt;a href="https://github.com/OssiLehtinen/uArm"&gt;Python Library for the uArm swift Pro robot arm&lt;/a&gt;
&lt;a href="http://www.aransena.com/blog/2016/9/13/uarm-controller"&gt;Blog on uarm and ros&lt;/a&gt;
&lt;a href="https://github.com/aransena/uarm_metal"&gt;Old uarm and ros&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Connect uArm&lt;/p&gt;
&lt;p&gt;Give temporary rights access uArm&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ sudo chmod 666 /dev/ttyACM0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or get permanent USB permission to access uArm&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/udev/rules.d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creat a file &lt;code&gt;ttyUSB.rules&lt;/code&gt; and put the following line: &lt;code&gt;KERNEL=="ttyUSB*", MODE="0666"&lt;/code&gt;. Save the file and &lt;strong&gt;reconnect&lt;/strong&gt; uArm USB to make it effective. (if you already have the permission to access USB, you can skip this step)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your uArm is connected to ttyACM instead of ttyUSB (you can check using dmesg -c command after connecting your uArm),
Creat a file &lt;code&gt;ttyACM.rules&lt;/code&gt; and put the following line: &lt;code&gt;KERNEL=="ttyACM*", MODE="0666"&lt;/code&gt;. Save the file and &lt;strong&gt;reconnect&lt;/strong&gt; uArm USB to make it effective. (if you already have the permission to access USB, you can skip this step)
&lt;a href="https://github.com/uArm-Developer/UArmForROS"&gt;taken from here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Install ROS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;http://wiki.ros.org/kinetic/Installation/Ubuntu&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Install ROS Industrial&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://msadowski.github.io/ros-industrial-coming-to-kinetic/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Moveit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;http://moveit.ros.org/install/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Robot drivers&lt;/h2&gt;
&lt;h3&gt;Swift Pro&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/uArm-Developer/SwiftproForROS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When RViz opens
- set "Fixed Frame" under global Options to "base" to get rid of the Fixed Frame [map] error
- add RobotModel
- add TF&lt;/p&gt;
&lt;p&gt;Happens when loading
 [ERROR] [1490907690.019375241]: Robot semantic description not found. Did you forget to define or remap '/robot_description_semantic'?
Inseart this in the launch file
&lt;param name="robot_description_semantic" textfile="$(find swiftpro_moveit)/config/swiftpro.srdf"/&gt;&lt;/p&gt;
&lt;p&gt;make node output ROS_INFO messages by adding output="screen", like this:
-   &lt;node name="swiftpro_read_node" pkg="swiftpro" type="swiftpro_read_node" output="screen" /&gt;&lt;/p&gt;
&lt;p&gt;add screen to output in console
&lt;!--    &lt;node name="swiftpro_read_node" pkg="swiftpro" type="swiftpro_read_node" output="screen" /&gt; --&gt;&lt;/p&gt;
&lt;h1&gt;KUKA iiwa&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;follow instructions in https://github.com/SalvoVirga/iiwa_stack&lt;/li&gt;
&lt;li&gt;connect orange cable and set pc ip to 160.69.69.100, subnet 255.255.0.0&lt;/li&gt;
&lt;li&gt;edit .bachrc&lt;/li&gt;
&lt;li&gt;edit launch file moveit_planning_execution.launch where sim should be changed to false in order to use the real robot.&lt;/li&gt;
&lt;li&gt;start program using “roslaunch moveit_planning_execution.launch”&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Inspiring robot projects&lt;/h1&gt;
&lt;p&gt;https://ing.dk/video/se-lille-hjaelper-robot-pa-arbejde-hos-grundfos-118751
http://www.kuka-robotics.com/denmark/da/solutions/solutions_search/L_R232_Robot_optimizes_cutting_of_pork_sides.htm
https://www.scottautomation.com/meat/
https://www.youtube.com/watch?v=a3GFjKo1FPM
Robot- human collaboration
http://www.kuka-robotics.com/hungary/en/solutions/solutions_search/L_R280_050528_Westfleisch.htm&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=tIIJME8-au8"&gt;KUKA robot faces off Timo Boll in table tennis duel&lt;/a&gt;
&lt;a href="https://www.youtube.com/watch?v=sPfL9YIbYeY"&gt;Comau Racer robot how to shoot hoops&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=fdXRTKy_TrM"&gt;Mercedes-Benz Industrie 4.0&lt;/a&gt;&lt;/p&gt;</content><category term="project"></category><category term="video"></category></entry></feed>